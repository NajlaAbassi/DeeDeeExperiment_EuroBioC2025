---
title: "One class to rule it all: `DeeDeeExperiment` for managing and exploring omics analysis results"
author:
- name: Najla Abassi
  affiliation: 
  - Research Associate, PhD Student
  - Bioinformatics Group
  - Institute of Medical Biostatistics, Epidemiology and Informatics (IMBEI), Mainz
date: "01.07.2025"
format:
  revealjs:
    self-contained: true
    transition: none
    fontsize: 18pt
    slide-number: TRUE
    width: 1180
    margin: 0.05
    scrollable: FALSE
    theme: default
    fig-align: center
    logo: "img/um_logo.png"
    output: html_document
    
---

## Omics data: Too many results, too many tables …

idea: imagine having SE object with your counts. to make sense of it, your gonna
do DEA, for each contrast, and potentially use any of the available frameworks
this generates, many tables already. then for each table you re gonna check in
which biological pathways these DEGs are involved, i.e. you are doing to perform
FEA, generating extra load of tables
Bigger problem with complex designs, or single cell data

* can show a tsne of many many clusters --> means many many tables

**cat meme comes here** to present the Problem: difficulty to manage, explore,
contextualize and reproduce

# Our solution? `DeeDeeExperiment`

here goes the anatomy of `DeeDeeExperiment` , make a point about the fact that
it extends SCE, story all the results, with metadata --> reproducibility, exploration
and management

Warning: `DeeDeeExperiment` won't do the analysis for you, it's just a container



# Why structure matters?

::: {layout="[[1,1], [1,2]]"}

:::{#first-column}

![](img/dikw-dde){size=70%}

:::

::: {.fragment}

::: {#second-column}


❌ Custom list objects

* Not reusable
* No formal structure

✅ S4 class

* Formal, extensible, robust 
* Bioconductor-compatible


*Formal structure*: not just an implementation detail &rarr; foundation of reproducibility


:::

:::

:::


# Our solution

::: {.fragment .fade-up}

* A new S4 object `DeeDeeExperiment`  to structure and store DE and enrichment analysis results in one place

    * Based on the `SummarizedExperiment` object
    
:::


# How does `DeeDeeExperiment` fit in the analysis workflow?

:::: {layout="[35,65]"}

![](img/rna_seq_pipeline_deedee.png){width=400 height=600}

![](img/DeeDeeExperiment_Anatomy.png){align=right width=860 height=560}

::::


# Built-in methods: Managing & exploring your results

| Purpose                  | Method                                            |
|--------------------------|---------------------------------------------------|
| Creating a dde object.   | `DeeDeeExperiment()`                                |
| Adding/removing results  | `add_dea()`, `add_fea()`/`remove_dea()`,`remove_fea()`|
| Linking DE & FE analysis | `link_dea_and_fea()`                                |
| Adding contextual info   | `add_scenario_info()`                             |
| Summarizing results      | `summary()`                                         |
| Renaming results         | `rename_dea()`, `rename_fea()`                        |
| Accessing results        | `dea()`, `fea()`, `dea_names()`, `get_dea_list()` …       |



# Example - Create `dde` object

```{r echo=FALSE}
library(DeeDeeExperiment)
library(DESeq2)
data("de_named_list", package = "DeeDeeExperiment")
data("topGO_results_list", package = "DeeDeeExperiment")
data("clusterPro_res", package = "DeeDeeExperiment")
data("de_limma",package = "DeeDeeExperiment")

ifng_vs_naive <- de_named_list$ifng_vs_naive
salmonella_vs_naive <- de_named_list$salmonella_vs_naive

topGO_ifng_vs_naive <- topGO_results_list$ifng_vs_naive
topGO_salmonella_vs_naive <- topGO_results_list$salmonella_vs_naive
cluster_pro_salmo_vs_naive <- clusterPro_res$salmonella_vs_naive

```

```{r}
#| output-location: fragment
#| echo: true
#| code-line-numbers: "2"


# create the dde object
dde <- DeeDeeExperiment(de_results = de_limma)
dde
```

# Example - Creating `dde` object

```{r}
#| output-location: fragment
#| echo: true
#| code-line-numbers: "4-5|8"
# create a named list to hold de results
# we use data from the macrophage package

de_res <- list(ifng_vs_naive = ifng_vs_naive,
               salmonella_vs_naive = salmonella_vs_naive)

# create the dde object
dde <- DeeDeeExperiment(de_results = de_res)
dde
```


# Example - Adding/removing results

```{r}
#| output-location: fragment
#| echo: true
# add enrichment results to the dde object
dde <- addFEA(dde,
        fea = list(ifng_vs_naive = topGO_ifng_vs_naive,
                   salmo_vs_naive = topGO_salmonella_vs_naive,
                   clusterPro_salmonella_vs_naive = cluster_pro_salmo_vs_naive))

dde
```

To add DEA results use `addDEA()`

# Example - Adding/removing results

```{r}
#| output-location: fragment
#| echo: true
# add enrichment results to the dde object
dde <- removeFEA(dde,
                  fea_name = "salmo_vs_naive")

dde
```

same for DEA results, use `removeDEA()`

# Example - Linking DE and FE Analysis

```{r}
#| output-location: fragment
#| echo: true
#| code-line-numbers: "3|4-5"

dde <- addFEA(dde, fea = cluster_pro_salmo_vs_naive)

dde <- linkDEAandFEA(dde,
                        dea_name = "salmonella_vs_naive",
                        fea_name = c("cluster_pro_salmo_vs_naive")
)
```

# Example - Adding contextual information

```{r}
#| output-location: fragment
#| echo: true
#| code-line-numbers: "2-5"
dde <- addScenarioInfo(dde,
                         dea_name = "ifng_vs_naive",
                         info = c("This results contains the output of a DEA performed on data from the `macrophage` package",
                                  c("The results compares naive Macrophages against,
                                    those associated with IFNg"))
)
```

# Example - Summarizing results {auto-animate="true"}

```{r}
#| output-location: fragment
#| echo: true
summary(dde)
```

# Example - Summarizing results {auto-animate="true"}

```{r}
#| output-location: fragment
#| echo: true
#| code-line-numbers: "2-3"

summary(dde,
        # specify FDR threshold for subsetting DE genes based on adjusted p-values
        FDR = 0.01)
```

# Example - Summarizing results {auto-animate="true"}

```{r}
#| output-location: fragment
#| echo: true
#| code-line-numbers: "4-5"
summary(dde,
        # specify FDR threshold for subsetting DE genes based on adjusted p-values
        FDR = 0.01,
        # show contextual information, if available
        show_scenario_info = TRUE)
```


# Example - Renaming results

```{r}
#| output-location: fragment
#| echo: true
#| code-line-numbers: "2-3"

dde <- renameDEA(dde,
                  old_name = "ifng_vs_naive",
                  new_name = "contrast_ifng_vs_naive")

dde
```

To rename FEA results use `renameFEA()`

# Example - Accessing results

```{r}
#| output-location: fragment
#| echo: true

# get DEA names
DEANames(dde)

```

Similarly use `FEANames` to retrieve stored FEAs


# Example - Accessing results

```{r}
#| output-location: fragment
#| echo: true
#| code-line-numbers: "2"
knitr::kable(head(
  DEA(dde, "contrast_ifng_vs_naive")))
```

# Example - Accessing results

```{r}
#| output-location: fragment
#| echo: true
#| code-line-numbers: "2"
knitr::kable(head(
  FEA(dde, "ifng_vs_naive")))
```

# Example - Accessing results

```{r}
#| output-location: fragment
#| echo: true
#| code-line-numbers: "2"
# get all FEAs associated to a specific DEA
knitr::kable(lapply(getFEAList(dde,
                                 dea_name = "salmonella_vs_naive",
                                 format = "original"), head))
             
             
```



# Other features ...

You can:

::: {.fragment}

* overwrite results using `force = TRUE`
* return results either in `original` or `minimal` format
* access associated metadata associate to stored DEA/FEA using `DEAInfo()`/`FEAInfo()`

:::


# Downstream operations

`DeeDeeExperiment` objects can be used with other Bioconductor tools like `iSEE` & `GeneTonic`

![](img/Bioconductor.gif){width=230 height=260} | ![](img/iSEE.png){width=160 height=180}| ![](img/GeneTonic.png){width=160 height=180} |
| --------------------------------------|------------------------------|------------------------------|


# Documentation

![](img/documentation.png)


# DeeDeeExperiment - Current state

::: {layout="[[1,1], [1,2]]"}

:::{#first-column}

DeeDeeExperiment is stable now

![](img/rcmd_check_newest.png){size=50%}

:::

:::{#second-column}

![](img/updates_and_suggestions_branch.png){size=50%}

Thank you for all the feedback you have provided ❤️!

:::
:::

# Next steps ?

::: {.fragment .highlight-blue}

Submission to Bioconductor!
:::

![](img/submission_to_bioc.png)

# Thank you for your attention :)

Any questions?


