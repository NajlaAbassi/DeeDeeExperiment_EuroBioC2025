---
title: "One class to rule them all: `DeeDeeExperiment` for managing and exploring omics analysis results"

author:
- name: Najla Abassi
  affiliation: 
  - Research Associate, PhD Student
  - Bioinformatics Group
  - Institute of Medical Biostatistics, Epidemiology and Informatics (IMBEI), Mainz, Germany
  - EuroBioC2025, Barcelona, Spain
date: "09.17.2025"
date-format: long
format:
  revealjs:
    self-contained: true
    transition: none
    fontsize: 18pt
    slide-number: false
    width: 1180
    margin: 0.05
    scrollable: FALSE
    theme:
    - default
    - ummz_reveal_theme.scss
    fig-align: center
    auto-play-media: true
    title-slide-attributes:
      data-background-image: "img/title_slide_with_logos.png"
    output: html_document
---

## Omics data: Too many results, too many tables …

![](img/dde_setup_1.png){width=80% fig-align="center"}

::: aside

:::

## Omics data: Too many results, too many tables …

![](img/dde_setup_2.png){width=80% fig-align="center"}

::: aside
* DEA: Differential Expression Analysis
:::

## Omics data: Too many results, too many tables …

![](img/dde_setup_3.png){width=80% fig-align="center"}

::: aside
* DEA: Differential Expression Analysis
:::

## Omics data: Too many results, too many tables …

![](img/dde_setup_4.png){width=80% fig-align="center"}

::: aside
* DEA: Differential Expression Analysis
:::

## Omics data: Too many results, too many tables …

![](img/dde_setup_5.png){width=80% fig-align="center"}

::: aside
* DEA: Differential Expression Analysis
* FEA: Functional Enrichment Analysis
:::

## Probelm amplified: Complex designs/Single cell data ...

:::::: {layout="[[1,1], [1]]" layout-heights="[2,1]"}

![](img/tsne_exp.png)

::: {.fragment}

![](img/Woman-Yelling-At-Cat-DeeDee_2.png)

:::

:::: fragment

::: {.callout-warning}

## Problem

* Difficulty to **manage**, **explore**, **contextualize** and **reproduce** the results

:::

::::
::::::

# Our solution

-   A new S4 object `DeeDeeExperiment` to structure and store DEA and FEA results in one place, based on the `SingleCellExpriment` object

![](img/DeeDeeExperiment_Anatomy.png){width=50% fig-align="center"}

::: {.callout-note}

`DeeDeeExperiment` won't do the analysis for you, it's a **container**

:::

## Creating a `DeeDeeExperiment` object

```{r process-data, echo=FALSE}
library("DeeDeeExperiment")
library("DESeq2")
library("macrophage")
data(gse, package = "macrophage")
# set up design
dds_macrophage <- DESeqDataSet(gse, design = ~ line + condition)
rownames(dds_macrophage) <- substr(rownames(dds_macrophage), 1, 15)
keep <- rowSums(counts(dds_macrophage) >= 10) >= 6

dds_macrophage <- dds_macrophage[keep, ]

# set seed for reproducibility
set.seed(42)
# sample randomly for 1k genes to speed up the processing
selected_genes <- sample(rownames(dds_macrophage), 1000)

dds_macrophage <- dds_macrophage[selected_genes, ]

# run DESeq
dds_macrophage <- DESeq(dds_macrophage)

FDR <- 0.05
# IFNg_vs_naive
IFNg_vs_naive <- results(dds_macrophage,
                         name = "condition_IFNg_vs_naive",
                         lfcThreshold = 1,
                         alpha = FDR
)
IFNg_vs_naive <- lfcShrink(dds_macrophage,
                           coef = "condition_IFNg_vs_naive",
                           res = IFNg_vs_naive,
                           type = "apeglm"
)

# Salm_vs_naive
Salm_vs_naive <- results(dds_macrophage,
                         name = "condition_SL1344_vs_naive",
                         lfcThreshold = 1,
                         alpha = FDR
)
Salm_vs_naive <- lfcShrink(dds_macrophage,
                           coef = "condition_SL1344_vs_naive",
                           res = Salm_vs_naive,
                           type = "apeglm"
)


# create DGE list
dge <- DEFormats::as.DGEList(dds_macrophage)
# normalize the counts
dge <- edgeR::calcNormFactors(dge)

# create design for DE
design <- model.matrix(~ line + group, data = dge$samples)
# transform counts into logCPM
v <- limma::voom(dge, design)

# fitting linear models using weighted least squares for each gene
fit <- limma::lmFit(v, design)

# setup comparisons
contrast_matrix <- limma::makeContrasts(
  IFNg_vs_Naive = groupIFNg,
  Salm_vs_Naive = groupSL1344,
  levels = design
)

# apply contrast
fit2 <- limma::contrasts.fit(fit, contrast_matrix)

# empirical Bayes moderation of standard errors
fit2 <- limma::eBayes(fit2)
de_limma <- fit2 # MArrayLM object


data("topGO_results_list", package = "DeeDeeExperiment")
data("clusterPro_res", package = "DeeDeeExperiment")
data("gost_res",package = "DeeDeeExperiment")
  
```

```{r construct_dde, warning=FALSE}
#| echo: true
#| code-line-numbers: "2-6"
#| output-location: fragment
# initialize DeeDeeExperiment with dds object and DESeq results (as a named list)
dde <- DeeDeeExperiment(sce = dds_macrophage,
                        de_results = list(
                          IFNg_vs_naive = IFNg_vs_naive,
                          Salm_vs_naive = Salm_vs_naive
                          ))

dde
```

:::: fragment

::: {.callout-note}

Supported DE result types: `DESeqResults`, `DGEExact`, `DGELRT`, `MArrayLM`, or `data.frame`

:::

::::

## Adding results to a `dde` object

### DEA results

```{r addDEA, warning=FALSE}
#| output-location: fragment
#| echo: true
#| code-line-numbers: "2"
# add results from limma as a MArrayLM object
dde <- addDEA(dde, dea = de_limma)

dde
```

```{r addDEA_2, warning=FALSE}
#| output-location: fragment
#| echo: true
#| code-line-numbers: "2"
# inspect the columns of the rowData
tail(names(rowData(dde)))
```


## Adding results to a `dde` object

```{r addDEA_force_no, warning=FALSE, echo=FALSE}
#| echo: false
dde <- addDEA(dde, dea = list(same_contrast = de_limma))

# overwrite results with the same name
# e.g. if the content of the same object has changed
dde <- addDEA(dde,
              dea = list(same_contrast = de_limma),
              force = TRUE)

```

### FEA results

→ Can be added to a `dde` object using the `addFEA()` method.


```{r addFEA, echo=FALSE, warning=FALSE}
#| echo: true
#| code-line-numbers: "2-3|6|9"
# add FEA results as a named list
dde <- addFEA(dde,
              fea = list(IFNg_vs_naive = topGO_results_list$ifng_vs_naive))

# add FEA results as a single object
dde <- addFEA(dde, fea = gost_res$result)

# add FEA results and specify the FEA tool
dde <- addFEA(dde, fea = clusterPro_res, fea_tool = "clusterProfiler")

```

::: {.fragment .fade-up}
FEA results formats that are supported natively within `DeeDeeExperiment`

```{r fea_formats}
#| echo: true
supported_fea_formats()
```
:::

## Linking DE and FE Analysis in a `dde` object

<br>
<br>
<br>
<br>

```{r link_fea}
#| echo: true
#| message: true
#| output-location: fragment
dde <- linkDEAandFEA(dde,
                     dea_name = "IFNg_vs_naive",
                     fea_name = c("IFNg_vs_naive", "gost_res$result"))
```

## Adding contextual information

<br>
<br>
<br>
<br>

```{r addScenarioInfo}
#| echo: true
#| code-line-numbers: "1|2|3"
dde <- addScenarioInfo(dde,
                       dea_name = "IFNg_vs_naive",
                       info = "This results contains the output of a Differential Expression Analysis performed on data from the `macrophage` package, more precisely contrasting the counts from naive macrophage to those associated with IFNg."
)
```


::: {.fragment .fade-up}

* **Document experimental setup** for clarity & reproducibility
* **Clarify comparisons** between conditions
* **Provide extra context** that can assist interpretation (e.g. by LLM)

:::


## Summary of a `dde` object {auto-animate="true"}

<br>

```{r summary_mini}
#| echo: true
#| output-location: fragment
# minimal summary
summary(dde)
```

## Summary of a `dde` object

### Set FDR threshold

```{r summary_fdr}
#| echo: true
#| output-location: fragment
# specify FDR threshold for subsetting DE genes based on adjusted p-values
summary(dde,
        FDR = 0.01)
```

## Summary of a `dde` object

### Display scenario information

```{r summary_show_scenario}
#| echo: true
#| output-location: fragment
# show contextual information, if available
summary(dde,
        show_scenario_info = TRUE)
```

## Accessing results stored in a `dde` object {auto-animate="true"}

<br>
<br>
<br>
<br>

```{r names}
#| echo: true
#| output-location: fragment
# get DEA names
getDEANames(dde)
```

:::: {.fragment .fade-up}
::: callout-tip
To retrieve the names of available FEAs in a `dde` object, use `getFEANames()`
:::
::::

## Accessing results stored in a `dde` object {auto-animate="true"}

### Accessing DEA results {auto-animate="true" auto-animate-easing="ease-in-out"}

```{r get_dea_res_1}
#| echo: true
#| code-line-numbers: "2-2"
#| output: true
#| output-location: fragment
# access the 1st DEA if dea_name is not specified (default: minimal format)
knitr::kable(head(getDEA(dde)))
```

## Accessing results stored in a `dde` object {auto-animate="true"}

### Accessing DEA results, by DEA name {auto-animate="true" auto-animate-easing="ease-in-out"}

```{r get_dea_res_3}
#| echo: true
#| output: true
#| code-line-numbers: "2-3"
#| output-location: fragment
# access specific DEA by name, in minimal format
knitr::kable(head(getDEA(dde,
                         dea_name = "Salm_vs_naive")))
```

## Accessing results stored in a `dde` object {auto-animate="true"}

### Accessing DEA results, as a `list` {auto-animate="true" auto-animate-easing="ease-in-out"}

```{r getDEAList}
#| echo: true
#| output: true
#| output-location: fragment
# get dea results as a list, (default: minimal format)
lapply(getDEAList(dde), head)
```

:::: {.fragment .fade-up}
::: callout-tip
### Accessing FEA results

`getFEA()` directly accesses specific FEA results.

`getFEAList()` returns all FEAs stored in a `dde` object. Optionally, if `dea_name` is set, it returns all FEAs linked to a specific DEA.
:::
::::

# Other operations ...

## Renaming results in a `dde` object

### Renaming DEA results

<br>
<br>

```{r rename}
#| echo: true
#| message: true
#| output-location: fragment
#| code-line-numbers: "3-4"
# rename dea, one element
dde <- renameDEA(dde,
                 old_name = "de_limma",
                 new_name = "ifng_vs_naive_&_salm_vs_naive")
```

```{r rename_2}
#| echo: true
#| message: true
#| output-location: fragment
#| code-line-numbers: "3-4"
# multiple entries at once
dde <- renameDEA(dde,
                 old_name = c("same_contrast", "Salm_vs_naive"),
                 new_name = c("same_contrast_new", "Salm_vs_naive_new")
                 )
```


:::: {.fragment .fade-up}
::: callout-tip
To rename FEAs stored in a `dde` object, use `renameFEA()`
:::
::::

## Removing results in a `dde` object

### Removing DEA results

<br>
<br>

```{r remove}
#| echo: true
# removing dea
dde <- removeDEA(dde,
                 c("ifng_vs_naive_&_salm_vs_naive",
                   "same_contrast_new",
                   "Salm_vs_naive_new"))
```

:::: {.fragment .fade-up}
::: callout-tip
To remove FEAs stored in a `dde` object, use `removeFEA()`
:::
::::

# Other features ...

## Access associated metadata stored in `dea`/`fea` using `getDEAInfo()`/`getFEAInfo()`

<br>
<br>
<br>
<br>

```{r getDEAInfo getDEAInfo_1}
#| echo: true
#| output-location: fragment
#| code-line-numbers: "2-2"
#| output: true

# extra info
getDEAInfo(dde)$IFNg_vs_naive$package 
```

```{r getDEAInfo_2}
#| echo: true
#| output-location: fragment
#| code-line-numbers: "2-2"
#| output: true
# extra info
getDEAInfo(dde)$IFNg_vs_naive$alpha 
```

## Overwrite results using `force = TRUE`

<br>
<br>

```{r addDEA_force, warning=FALSE}
#| echo: true
#| code-line-numbers: "1|5-7"
#| output-location: fragment
dde <- addDEA(dde, dea = list(same_contrast = de_limma))

# overwrite results with the same name
# e.g. if the content of the same object has changed
dde <- addDEA(dde,
              dea = list(same_contrast = de_limma),
              force = TRUE)

dde
```


## Return results in `original` format (default `format = "minimal"`)

```{r get_dea_res_2}
#| echo: true
#| output: true
#| code-line-numbers: "2-2"
#| output-location: fragment
# access the 1st DEA, in original format
knitr::kable(head(getDEA(dde, format = "original")))
```

## Single-cell in practice

![](img/tsne_exp_ror_meme.png){width=50% fig-align="center"}

## Single-cell in practice (`muscat::pbDS()` → `DeeDeeExperiment`)

```{r sce_example, eval=FALSE}
#| echo: true
#| code-line-numbers: "4-8|14|20|21|22|39-41"
# create res, a list to hold pseudobulk DE results for all contrasts
for (i in names(contrast)) {
  cat("Contrast: ", i,"\n")
  res <- pbDS(pb,
              design = mm,
              contrast = contrast[[i]],
              verbose = TRUE,
              BPPARAM = BiocParallel::MulticoreParam(6))
  
  results_list[[i]] <- res
}

# extract contrast
contrast_vtp_DMSO <- res$table$`VTP-DMSO`

# renaming columns
for (cell in names(contrast_vtp_DMSO)) {
  contrast_vtp_DMSO[[cell]] <-
  contrast_vtp_DMSO[[cell]] |>
  dplyr::rename(log2FoldChange = logFC,
                pvalue = p_val,
                padj = p_adj.loc)
  
  rownames(contrast_vtp_DMSO[[cell]]) <- contrast_vtp_DMSO[[cell]]$gene
}

# optional: update de + enrich list names
new_names <- c(
  "NK1 A+B" = "NK1_A_B",
  "NK1 C" = "NK1_C",
  "NK2" = "NK2",
  "NK3" = "NK3" ,
  "NKint" = "NKint"
)
names(contrast_vtp_DMSO) <- new_names[names(contrast_vtp_DMSO)]
names(func_res) <- new_names[names(func_res)]

# create dde object
dde <- DeeDeeExperiment(sce_NKcells, # sce object
                        de_results = contrast_vtp_DMSO, # DEA results
                        enrich_results = func_res # FEA results
                        )
```



## Downstream operations with `DeeDeeExperiment` objects

`DeeDeeExperiment` objects can be used with other Bioconductor tools like `iSEE` & `GeneTonic`, or anything that works for a SCE object

<br>
<br>
<br>

::: {.center}

![](img/Bioconductor.gif){width=230 height=260} | ![](img/iSEE.png){width=160 height=180}| ![](img/GeneTonic.png){width=160 height=180} |                                               ![](img/GeneTonic.png){width="120" height="140"}
| --------------------------------------|------------------------------|------------------------------|

:::

# `DeeDeeExperiment` is available on Bioconductor

![](img/dde_inbioc.png)

https://bioconductor.org/packages/DeeDeeExperiment

# Thank you :)

:::: {.columns}

::: {.column}
<br>

![](img/BioinfoGroupFoto.JPG){fig-align="center"}

* *Bioinformatics group @IMBEI*
* *Bioconductor community, developers-forum*
:::


::: {.column}
<br>

![](img/dde_qr_code.png){width=80% fig-align="center"}


:::


::::


